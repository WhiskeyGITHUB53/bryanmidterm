{
  "version": 3,
  "sources": ["../../vuetify/src/composables/dimensions.ts", "../../vuetify/src/composables/transition.ts"],
  "sourcesContent": ["// Utilities\nimport { computed } from 'vue'\nimport { convertToUnit, propsFactory } from '@/util'\n\n// Types\nexport interface DimensionProps {\n  height?: number | string\n  maxHeight?: number | string\n  maxWidth?: number | string\n  minHeight?: number | string\n  minWidth?: number | string\n  width?: number | string\n}\n\n// Composables\nexport const makeDimensionProps = propsFactory({\n  height: [Number, String],\n  maxHeight: [Number, String],\n  maxWidth: [Number, String],\n  minHeight: [Number, String],\n  minWidth: [Number, String],\n  width: [Number, String],\n}, 'dimension')\n\nexport function useDimension (props: DimensionProps) {\n  const dimensionStyles = computed(() => ({\n    height: convertToUnit(props.height),\n    maxHeight: convertToUnit(props.maxHeight),\n    maxWidth: convertToUnit(props.maxWidth),\n    minHeight: convertToUnit(props.minHeight),\n    minWidth: convertToUnit(props.minWidth),\n    width: convertToUnit(props.width),\n  }))\n\n  return { dimensionStyles }\n}\n", "// Utilities\nimport { h, mergeProps, Transition } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Component, FunctionalComponent, PropType, TransitionProps } from 'vue'\n\nexport const makeTransitionProps = propsFactory({\n  transition: {\n    type: [Boolean, String, Object] as PropType<string | boolean | TransitionProps & { component?: Component }>,\n    default: 'fade-transition',\n    validator: val => val !== true,\n  },\n}, 'transition')\n\ninterface MaybeTransitionProps extends TransitionProps {\n  transition?: string | boolean | TransitionProps & { component?: any }\n}\n\nexport const MaybeTransition: FunctionalComponent<MaybeTransitionProps> = (props, { slots }) => {\n  const { transition, ...rest } = props\n\n  if (!transition || typeof transition === 'boolean') return slots.default?.()\n\n  const { component = Transition, ...customProps } = typeof transition === 'object' ? transition : {}\n\n  return h(\n    component,\n    mergeProps(typeof transition === 'string' ? { name: transition } : customProps as any, rest as any),\n    slots\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;AAeO,IAAMA,qBAAqBC,aAAa;EAC7CC,QAAQ,CAACC,QAAQC,MAAT;EACRC,WAAW,CAACF,QAAQC,MAAT;EACXE,UAAU,CAACH,QAAQC,MAAT;EACVG,WAAW,CAACJ,QAAQC,MAAT;EACXI,UAAU,CAACL,QAAQC,MAAT;EACVK,OAAO,CAACN,QAAQC,MAAT;AANsC,GAO5C,WAP2C;AASvC,SAASM,aAAcC,OAAuB;AACnD,QAAMC,kBAAkBC,SAAS,OAAO;IACtCX,QAAQY,cAAcH,MAAMT,MAAP;IACrBG,WAAWS,cAAcH,MAAMN,SAAP;IACxBC,UAAUQ,cAAcH,MAAML,QAAP;IACvBC,WAAWO,cAAcH,MAAMJ,SAAP;IACxBC,UAAUM,cAAcH,MAAMH,QAAP;IACvBC,OAAOK,cAAcH,MAAMF,KAAP;EANkB,EAAR;AAShC,SAAO;IAAEG;EAAF;AACR;;;AC5BM,IAAMG,sBAAsBC,aAAa;EAC9CC,YAAY;IACVC,MAAM,CAACC,SAASC,QAAQC,MAAlB;IACNC,SAAS;IACTC,WAAWC,SAAOA,QAAQ;EAHhB;AADkC,GAM7C,YAN4C;AAYxC,IAAMC,kBAA6D,CAACC,OAAD,SAAsB;AAAA,MAAA;AAAA,MAAd;IAAEC;EAAF,IAAc;AAC9F,QAAM;IAAEV;OAAeW;EAAjB,IAA0BF;AAEhC,MAAI,CAACT,cAAc,OAAOA,eAAe;AAAW,YAAA,iBAAOU,MAAML,YAAb,OAAA,SAAO,eAAA,KAAAK,KAAK;AAEhE,QAAM;IAAEE,YAAYC;OAAeC;EAA7B,IAA6C,OAAOd,eAAe,WAAWA,aAAa,CAAA;AAEjG,SAAOe,EACLH,WACAI,WAAW,OAAOhB,eAAe,WAAW;IAAEiB,MAAMjB;EAAR,IAAuBc,aAAoBH,IAA7E,GACVD,KAHM;AAKT;",
  "names": ["makeDimensionProps", "propsFactory", "height", "Number", "String", "maxHeight", "maxWidth", "minHeight", "minWidth", "width", "useDimension", "props", "dimensionStyles", "computed", "convertToUnit", "makeTransitionProps", "propsFactory", "transition", "type", "Boolean", "String", "Object", "default", "validator", "val", "MaybeTransition", "props", "slots", "rest", "component", "Transition", "customProps", "h", "mergeProps", "name"]
}
